var e = require("../js/evaluate.js");
var S = require("../js/score.js");
var assert = require('assert');

var b

var equal = function(a, b) {
  return a < b * 1.2 && a > b*0.8;
}

describe('test evalute', function() {
  it(`test one`, function() {
    b = [
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 2, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b, 2), S.TWO));

    b = [
      [0, 0, 0],
      [0, 1, 0],
      [0, 0, 0],
    ];
    assert.ok(equal(e(b, 1), S.BLOCKED_TWO));

    b = [
      [0, 2, 0],
      [0, 1, 0],
      [0, 0, 0],
    ];
    assert.ok(equal(e(b, 1), S.BLOCKED_TWO));
  });

  it(`test two`, function() {
    b = [
      [0, 0, 2, 2, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.THREE));

    b = [
      [0, 0, 0, 0, 0, 0],
      [0, 2, 0, 2, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.THREE));
  });

  it(`test three`, function() {
    b = [
      [0, 2, 2, 2, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];

    assert.ok(equal(e(b), S.FOUR));

    b = [
      [0, 0, 0, 0, 0, 0],
      [0, 2, 2, 2, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.FOUR));

    b = [
      [0, 0, 0, 0, 0, 0],
      [0, 2, 0, 2, 2, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.FOUR));


    b = [
      [0, 0, 0, 0, 0, 0],
      [0, 2, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 2, 0, 0],
      [0, 0, 0, 0, 2, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.FOUR));
  });


  it(`test four `, function() {
    b = [
      [0, 2, 2, 2, 2, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.FIVE));

    b = [
      [0, 0, 0, 0, 0, 0],
      [0, 2, 2, 2, 2, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.FIVE));
  });



  it(`test five`, function() {
    b = [
      [0, 2, 2, 2, 2, 2],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
    ];
    assert.ok(equal(e(b), S.FIVE));

    b = [
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 2, 2, 2, 2, 2, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];

    assert.ok(equal(e(b), S.FIVE));
  });

  it(`test 冲四活三`, function() {
    b = [
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 2, 2, 2, 1, 0],
      [0, 0, 0, 0, 2, 1, 0, 0, 0],
      [0, 0, 0, 0, 0, 2, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];
    assert.ok(equal(e(b), S.FOUR));

  });
});
